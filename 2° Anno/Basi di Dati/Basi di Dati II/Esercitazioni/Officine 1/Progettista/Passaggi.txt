Passaggi per arrivare al lavoro da progettista su questa esercitazione:

1. Eliminazione dei valori multivalori: Non è stato fatto (non c'è n'erano)

2. Scelta e progettazione dei tipi di dato:
	- Stringa -> Varchar
	- Intero >= 0 -> Int_gz_not_null
	- Indirizzo -> 
		1. CREATE DOMAIN String100_not_null AS varchar(100) CHECK (value IS NOT NULL);
		2. CREATE DOMAIN Int_gz_not_null AS Integer CHECK (value IS NOT NULL and value > 0);
		3. CREATE TYPE Indirizzo (via String100_not_null, civico Int_gz_not_null);
	
	- Codice Fiscale ->
		CREATE DOMAIN codicefiscale AS VARCHAR(16) CHECK (VALUE ~ '^[A-Za-z]{6}[0-9]{2}[A-Za-z][0-9]{2[A-Za-z][0-9]{3}[A-Za-z]$');
	
	- Codice ->
		CREATE DOMAIN codice AS VARCHAR(16) CHECK (VALUE ~ '^[A-Za-z]{6}[0-9]{2}[A-Za-z][0-9]{2}[A-Za-z][0-9]{3}[A-Za-z]$');

	- Telefono ->
		CREATE DOMAIN telefono AS VARCHAR(16) CHECK (VALUE ~ '^\+?[0-9]{1,3}[-. ]?[0-9]){3,15}$');

	- Targa ->
		CREATE DOMAIN targa AS VARCHAR(16) CHECK (VALUE ~ '^[A-Z0-9-.\s]{4,10}$');

	- Data -> Date

	- TipoRiparazione -> 
		CREATE TYPE TipoRiparazione AS ENUM ('Riparazione', 'RiparazioneTerminata')
	
	- DataOra ->

3. Ristrutturazione delle generalizzazioni: Vedi UML

4. Identificatori di classi: Vedi UML

5. Vincoli Esterni:

- Vincoli per Riparazione: Per ogni istanza R di riparazione

R.tipo = ‘RiparazioneTerminata’ se e solo se R.riconsegna è valorizzato: 
FOR ALL R Riparazione(R) → [tipo(R, 'RiparazioneTerminata') ↔ EXIXTS r riconsegna(R, r)]

- Vincoli per Staff: Per ogni istanza s di Staff

s.is_dipendente = TRUE se e solo se assunzione è valorizzato:
FOR ALL s Staff(s) -> (is_dipendente(s, true) <-> EXIXTS a assunzione(s, a)

s.is_dipendente = TRUE se e solo se è coinvolto in un link "lavora":
FOR ALL s Staff(s) -> (is_dipendente(s, true) <-> EXIXTS l lavora(s, l)

s.is_dirigente = TRUE se e solo se nascita è valorizzato:
FOR ALL s Staff(s) -> (is_dirigente(s, true) <-> EXIXTS n nascita(s, n)

s.is_dirigente = TRUE se e solo se è coinvolto in un link "dirige":
FOR ALL s Staff(s) -> (is_dirigente(s, true) <-> EXIXTS d dirige(s, d)

s.is_dirigente = TRUE oppure s.is_dipendente = TRUE 
FOR ALL s Staff(s) -> (is_dirigente(s, true) OR is_dipendente(s, true))

FOR ALL s, o dirige(s,o) -> lavora(s,o)

- Vincoli per Persona: Per ogni istanza di p di Persona 

FOR ALL p Persona(p) -> (EXIXTS prima(d, s)) OR (EXIXTS seconda(d,s))













