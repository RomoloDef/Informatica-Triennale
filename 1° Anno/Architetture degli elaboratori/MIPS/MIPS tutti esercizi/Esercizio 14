#  La ridotta n-esima della serie armonica è definita come: Hn =1+ 1/2 + 1/3 +...+ 1/n. Si scriva un programma in linguaggio assemblativo MIPS/MARS che ripeta i passi seguenti:
# legga da tastiera un numero intero n
# se il numero è minore o uguale a 0 termina l’esecuzione
# se il numero è maggiore di 0 stampa Hn (cioè la somma dei primi n termini della serie)

.text
.globl main

main:

	li $v0, 4		# codice per lettura syscall
	la $v0, numero		# carico il numero
	syscall
	
	li $v0, 5		# carico il codice di syscall per leggere un intero
	syscall
	move $t0, $v0		# sposto il numero intero letto nel registro $t0
	
	li $t1, 0		# inizializzo l'indice
	lwc1 $f1, zero		# inizializzo il totale
	lwc1 $f2, uno		# carico nel coprocessore il numero 1 che mi servirà nella seria
	
	ble $t0, $zero, FINE
	j CICLO
	
CICLO:	
	mtc1 $t1, $f0
	div.s $f3, $f2, $f0	# 1/n
	add.s $f1, $f1, $f3	# totale = totale + 1/n
	add.s $f1, $f1, $f2	# totale = totale_precedente + 1
	addi $t0, $t0, 1	# incremento l'indice
	mfc1 $t1, $f0
	j CICLO
	
FINE:

	li $v0, 10
	syscall

.data
numero: .asciiz "Inserisci il numero: "
zero: .float 0.0
uno: .float 1.0
